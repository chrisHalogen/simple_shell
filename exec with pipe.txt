
/**
// Function where the piped system commands is executed
void exec_cmds_with_pipe(char **args, char **args_pipe) {
    // 0 is read end, 1 is write end
    int pipefd[2];
    pid_t p1, p2;
    int i = 0;
    char path_url[30] = "/usr/bin/";

    if (pipe(pipefd) < 0) {
        printf("\nPipe could not be initialized");
        return;
    }
    p1 = fork();
    if (p1 < 0) {
        printf("\nCould not fork");
        return;
    }

    if (p1 == 0) {
        // Child 1 executing..
        // It only needs to write at the write end
        close(pipefd[0]);
        dup2(pipefd[1], STDOUT_FILENO);
        close(pipefd[1]);

        while (args[0][i])
        {
          if (args[0][i] == '/'){
            if (execve(args[0], args, environ) < 0) {
              printf("\nCould not execute command 1..");
              exit(0);
            }
            
          }
          i++;
        }

        _strcat(path_url, args[0]);
        if (execve(path_url, args, environ) < 0) {
          printf("\nCould not execute command 1..");
          exit(0);
        }

        // if (execvp(args[0], args) < 0) {
        //    printf("\nCould not execute command 1..");
        //    exit(0);
        // }
    } else {
        // Parent executing
        p2 = fork();

        if (p2 < 0) {
            printf("\nCould not fork");
            return;
        }

        // Child 2 executing..
        // It only needs to read at the read end
        if (p2 == 0) {
            close(pipefd[1]);
            dup2(pipefd[0], STDIN_FILENO);
            close(pipefd[0]);

            while (args_pipe[0][i])
            {
              if (args_pipe[0][i] == '/'){
                if (execve(args_pipe[0], args_pipe, environ) < 0) {
                  printf("\nCould not execute command 2..");
                  exit(0);
                }
                
              }
              i++;
            }
        
            _strcat(path_url, args_pipe[0]);
            if (execve(path_url, args_pipe, environ) < 0) {
              printf("\nCould not execute command 2..");
              exit(0);
            }

            // if (execvp(args_pipe[0], args_pipe) < 0) {
            //     printf("\nCould not execute command 2..");
            //     exit(0);
            // }
        } else {
        // parent executing, waiting for two children
        wait(NULL);
        wait(NULL);
        }
    }
}
*/
